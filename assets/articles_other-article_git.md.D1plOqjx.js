import{_ as a,c as t,o as s,a3 as i}from"./chunks/framework.BjZvSh4S.js";const d=JSON.parse('{"title":"git 命令","description":"","frontmatter":{},"headers":[],"relativePath":"articles/other-article/git.md","filePath":"articles/other-article/git.md"}'),l={name:"articles/other-article/git.md"};function n(c,e,p,r,o,g){return s(),t("div",null,e[0]||(e[0]=[i(`<h1 id="git-命令" tabindex="-1">git 命令 <a class="header-anchor" href="#git-命令" aria-label="Permalink to &quot;git 命令&quot;">​</a></h1><h2 id="一、-cherry-pick-合并特定的提交-commits" tabindex="-1">一、 cherry-pick 合并特定的提交（commits） <a class="header-anchor" href="#一、-cherry-pick-合并特定的提交-commits" aria-label="Permalink to &quot;一、 cherry-pick 合并特定的提交（commits）&quot;">​</a></h2><ol><li><p>出你想要合并的提交的哈希值。你可以使用 git log 查看提交历史来找到它们。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git log &lt;branch&gt;</span></span></code></pre></div></li><li><p>确定你想要合并的提交的哈希值后，切换到你想要应用这些更改的分支：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git checkout &lt;target-branch&gt;</span></span></code></pre></div></li><li><p>使用 git cherry-pick 命令合并这些提交</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git cherry-pick &lt;commit-hash&gt;</span></span></code></pre></div></li><li><p>如果你想合并一系列连续的提交，可以使用下面的语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git cherry-pick &lt;start-commit-hash&gt;^..&lt;end-commit-hash&gt;</span></span></code></pre></div></li><li><p>例子</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 查看feature分支的提交历史</span></span>
<span class="line"><span>git log feature</span></span>
<span class="line"><span># 切换到 master 分支</span></span>
<span class="line"><span>git checkout master</span></span>
<span class="line"><span># 合并特定的提交</span></span>
<span class="line"><span>git cherry-pick 1a2b3c4</span></span></code></pre></div></li></ol><h2 id="二、git-revert-撤销-merge-之后再次-merge-代码无变化" tabindex="-1">二、git revert 撤销 merge 之后再次 merge 代码无变化 <a class="header-anchor" href="#二、git-revert-撤销-merge-之后再次-merge-代码无变化" aria-label="Permalink to &quot;二、git revert 撤销 merge 之后再次 merge 代码无变化&quot;">​</a></h2><ol><li>场景复现：前段时间，把开发分支代码合并到主分支，需求变动需要撤销合并，后面开发完成后再次合并代码，发现代码无变化，</li><li>原因：<code>git revert &lt;commit-id&gt;</code>是用于在下次提交时删除某个文件，以达到撤销的目的。当再次合并相同的提交时因为此提交是存在主分支上的，所以git会拒绝重复的合并commit。</li><li>解决： <ol><li>暴力解决：手动修改然后提交代码。</li><li>再次<code>revert</code>：对<code>revert</code>的那次记录再次进行<code>revert</code>操作。</li></ol></li><li>原因深究：<a href="https://juejin.cn/post/7426287101425844278" target="_blank" rel="noreferrer">merge原理</a></li></ol>`,5)]))}const m=a(l,[["render",n]]);export{d as __pageData,m as default};
