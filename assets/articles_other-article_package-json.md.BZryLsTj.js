import{_ as o,c as a,o as t,a3 as c}from"./chunks/framework.pZuGGI72.js";const p=JSON.parse('{"title":"package.json 遇到的问题","description":"","frontmatter":{},"headers":[],"relativePath":"articles/other-article/package-json.md","filePath":"articles/other-article/package-json.md"}'),d={name:"articles/other-article/package-json.md"};function i(r,e,l,n,s,u){return t(),a("div",null,e[0]||(e[0]=[c('<h1 id="package-json-遇到的问题" tabindex="-1">package.json 遇到的问题 <a class="header-anchor" href="#package-json-遇到的问题" aria-label="Permalink to &quot;package.json 遇到的问题&quot;">​</a></h1><h2 id="cross-env-和-mode-在-webpack、vite-中的区别" tabindex="-1">cross-env 和--mode 在 webpack、vite 中的区别 <a class="header-anchor" href="#cross-env-和-mode-在-webpack、vite-中的区别" aria-label="Permalink to &quot;cross-env 和--mode 在 webpack、vite 中的区别&quot;">​</a></h2><h3 id="_1-基本概念" tabindex="-1">1. 基本概念 <a class="header-anchor" href="#_1-基本概念" aria-label="Permalink to &quot;1. 基本概念&quot;">​</a></h3><ul><li><strong><code>cross-env</code></strong>：是一个跨平台设置环境变量的工具，由于不同操作系统（如 Windows、Linux、macOS）设置环境变量的语法不同，<code>cross-env</code> 可以统一语法，方便开发者在不同系统上使用相同的命令来设置环境变量。</li><li><strong><code>--mode</code></strong>：是 Webpack 和 Vite 提供的命令行选项，用于指定项目的构建或开发模式，不同模式下可以加载不同的配置和环境变量。</li></ul><h3 id="_2-在-webpack-中的区别" tabindex="-1">2. 在 Webpack 中的区别 <a class="header-anchor" href="#_2-在-webpack-中的区别" aria-label="Permalink to &quot;2. 在 Webpack 中的区别&quot;">​</a></h3><h4 id="_2-1-功能差异" tabindex="-1">2.1 功能差异 <a class="header-anchor" href="#_2-1-功能差异" aria-label="Permalink to &quot;2.1 功能差异&quot;">​</a></h4><ul><li><strong><code>cross-env</code></strong><ul><li>主要作用是设置环境变量，例如设置 <code>NODE_ENV</code> 为 <code>production</code> 或 <code>development</code>。这些环境变量可以在 Webpack 配置文件以及项目代码中使用。</li><li>示例：在 <code>package.json</code> 中设置脚本命令 <code> &quot;build&quot;: &quot;cross-env NODE_ENV=production webpack&quot;</code>，这样在 Webpack 配置文件中可以通过 <code>process.env.NODE_ENV</code> 来获取这个环境变量的值，从而根据不同的环境进行不同的配置，如生产环境开启代码压缩等。</li></ul></li><li><strong><code>--mode</code></strong><ul><li>Webpack 从 4.0 版本开始引入了 <code>--mode</code> 选项，它会自动设置 <code>process.env.NODE_ENV</code> 的值，并且根据不同的模式应用一些默认的配置。</li><li>当使用 <code>--mode production</code> 时，Webpack 会自动开启一些优化，如代码压缩、Tree - Shaking 等；使用 <code>--mode development</code> 时，会开启一些开发相关的特性，如更详细的错误信息、更快的构建速度等。</li><li>示例：<code>package.json</code> 中的脚本命令 <code>&quot;build&quot;: &quot;webpack --mode production&quot;</code></li></ul></li></ul><h4 id="_2-2-环境变量加载与配置" tabindex="-1">2.2 环境变量加载与配置 <a class="header-anchor" href="#_2-2-环境变量加载与配置" aria-label="Permalink to &quot;2.2 环境变量加载与配置&quot;">​</a></h4><ul><li><strong><code>cross-env</code></strong>：需要开发者手动在 Webpack 配置文件中根据设置的环境变量进行相应的配置，例如手动引入不同的插件或加载不同的规则。</li><li><strong><code>--mode</code></strong>：Webpack 会根据指定的模式自动应用一些默认配置，开发者可以在此基础上进行扩展或覆盖。</li></ul><h3 id="_3-在-vite-中的区别" tabindex="-1">3. 在 Vite 中的区别 <a class="header-anchor" href="#_3-在-vite-中的区别" aria-label="Permalink to &quot;3. 在 Vite 中的区别&quot;">​</a></h3><h4 id="_3-1-功能差异" tabindex="-1">3.1 功能差异 <a class="header-anchor" href="#_3-1-功能差异" aria-label="Permalink to &quot;3.1 功能差异&quot;">​</a></h4><ul><li><strong><code>cross-env</code></strong><ul><li>同样用于设置环境变量，如 <code>cross-env NODE_ENV=staging vite build</code>，设置 <code>NODE_ENV</code> 为 <code>staging</code>。但 Vite 本身加载环境文件主要依据 <code>mode</code> 而非 <code>NODE_ENV</code>。</li><li>在代码中可以通过 <code>import.meta.env.NODE_ENV</code> 访问该环境变量，但它不会直接触发 Vite 加载特定模式的环境文件。</li></ul></li><li><strong><code>--mode</code></strong><ul><li>Vite 使用 <code>--mode</code> 选项来指定当前的构建或开发模式。当使用 <code>--mode staging</code> 时，Vite 会尝试加载 <code>.env.staging</code> 文件（如果存在），并将其中定义的环境变量注入到项目中。</li><li>同时，Vite 会将 <code>import.meta.env.MODE</code> 设置为指定的模式，方便在代码中判断当前模式。</li><li>示例：<code>package.json</code> 中的脚本命令 <code>&quot;build:staging&quot;: &quot;vite build --mode staging&quot;</code></li></ul></li></ul><h4 id="_3-2-环境变量加载与配置" tabindex="-1">3.2 环境变量加载与配置 <a class="header-anchor" href="#_3-2-环境变量加载与配置" aria-label="Permalink to &quot;3.2 环境变量加载与配置&quot;">​</a></h4><ul><li><strong><code>cross-env</code></strong>：仅设置环境变量，不会直接影响 Vite 加载环境文件的逻辑。如果想加载特定环境文件，需要在 <code>vite.config.ts</code> 中做额外处理。</li><li><strong><code>--mode</code></strong>：是 Vite 推荐的设置环境的方式，能直接触发 Vite 加载对应模式的环境文件，遵循 Vite 的标准工作流程。</li></ul><h3 id="_4-总结对比" tabindex="-1">4. 总结对比 <a class="header-anchor" href="#_4-总结对比" aria-label="Permalink to &quot;4. 总结对比&quot;">​</a></h3><table><thead><tr><th>工具</th><th>Webpack</th><th>Vite</th></tr></thead><tbody><tr><td><code>cross-env</code></td><td>设置环境变量，需手动在配置文件中处理相应逻辑</td><td>设置环境变量，但不直接触发环境文件加载，可能需在配置文件中额外处理</td></tr><tr><td><code>--mode</code></td><td>自动设置 <code>process.env.NODE_ENV</code> 并应用默认优化配置</td><td>加载对应模式的环境文件，设置 <code>import.meta.env.MODE</code>，遵循标准工作流程</td></tr></tbody></table>',16)]))}const b=o(d,[["render",i]]);export{p as __pageData,b as default};
