import{_ as i,c as a,o as t,a3 as e}from"./chunks/framework.BSW09o0Z.js";const d=JSON.parse('{"title":"JavaScript 技巧","description":"","frontmatter":{},"headers":[],"relativePath":"articles/js-article/js-tips.md","filePath":"articles/js-article/js-tips.md"}'),l={name:"articles/js-article/js-tips.md"};function n(h,s,p,o,r,k){return t(),a("div",null,s[0]||(s[0]=[e('<h1 id="javascript-技巧" tabindex="-1">JavaScript 技巧 <a class="header-anchor" href="#javascript-技巧" aria-label="Permalink to &quot;JavaScript 技巧&quot;">​</a></h1><h2 id="一、为什么typeof-的返回值是-object" tabindex="-1">一、为什么<code>typeof []</code> 的返回值是 <code>&quot;object&quot;</code> <a class="header-anchor" href="#一、为什么typeof-的返回值是-object" aria-label="Permalink to &quot;一、为什么`typeof []` 的返回值是 `&quot;object&quot;`&quot;">​</a></h2><h3 id="历史原因" tabindex="-1">历史原因 <a class="header-anchor" href="#历史原因" aria-label="Permalink to &quot;历史原因&quot;">​</a></h3><p>JavaScript 最初设计时开发周期较短，语言的类型系统设计相对简单。在早期版本中，JavaScript 只有少数几种基本数据类型（如 <code>number</code>、<code>string</code>、<code>boolean</code>、<code>null</code>、<code>undefined</code>），而其他所有非基本数据类型的值都被归类为 <code>object</code>。数组在 JavaScript 中属于复合数据类型，并非基本数据类型，因此按照当时的设计逻辑，<code>typeof</code> 运算符对数组返回 <code>&quot;object&quot;</code>。</p><h3 id="底层实现机制" tabindex="-1">底层实现机制 <a class="header-anchor" href="#底层实现机制" aria-label="Permalink to &quot;底层实现机制&quot;">​</a></h3><p>JavaScript 中的值在底层以二进制形式存储，每个值都有一个类型标签来表示其类型。在 JavaScript 引擎内部，类型标签是一个很小的整数，用于标识值的类型。对于大多数对象（包括数组），类型标签表示的就是对象类型。<code>typeof</code> 运算符是根据这个类型标签来判断值的类型的，由于数组的类型标签和普通对象一样被标记为对象类型，所以 <code>typeof []</code> 返回 <code>&quot;object&quot;</code>。</p><h3 id="示例代码验证" tabindex="-1">示例代码验证 <a class="header-anchor" href="#示例代码验证" aria-label="Permalink to &quot;示例代码验证&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: &quot;object&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: &quot;object&quot;</span></span></code></pre></div><h3 id="如何准确判断数组类型" tabindex="-1">如何准确判断数组类型 <a class="header-anchor" href="#如何准确判断数组类型" aria-label="Permalink to &quot;如何准确判断数组类型&quot;">​</a></h3><p>由于 <code>typeof</code> 无法准确区分数组和普通对象，你可以使用以下几种方法来判断一个值是否为数组：</p><ul><li><strong><code>Array.isArray()</code> 方法</strong>：这是 ES5 引入的方法，专门用于判断一个值是否为数组，使用起来简单直接。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: true</span></span></code></pre></div><ul><li><strong><code>instanceof</code> 运算符</strong>：用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: true</span></span></code></pre></div><ul><li><strong><code>Object.prototype.toString.call()</code> 方法</strong>：可以返回一个表示对象类型的字符串，通过判断该字符串是否为 <code>[object Array]</code> 来确定是否为数组。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.toString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[object Array]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: true</span></span></code></pre></div>',16)]))}const g=i(l,[["render",n]]);export{d as __pageData,g as default};
