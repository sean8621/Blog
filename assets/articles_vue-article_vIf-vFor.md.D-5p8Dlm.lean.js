import{_ as v,c as i,o as a,m as r,a as f}from"./chunks/framework.BjZvSh4S.js";const m=JSON.parse('{"title":"v-if 与 v-for","description":"","frontmatter":{},"headers":[],"relativePath":"articles/vue-article/vIf-vFor.md","filePath":"articles/vue-article/vIf-vFor.md"}'),o={name:"articles/vue-article/vIf-vFor.md"};function l(t,e,n,s,c,d){return a(),i("div",null,e[0]||(e[0]=[r("h1",{id:"v-if-与-v-for",tabindex:"-1"},[f("v-if 与 v-for "),r("a",{class:"header-anchor",href:"#v-if-与-v-for","aria-label":'Permalink to "v-if 与 v-for"'},"​")],-1),r("h2",{id:"一-优先级",tabindex:"-1"},[f("一.优先级 "),r("a",{class:"header-anchor",href:"#一-优先级","aria-label":'Permalink to "一.优先级"'},"​")],-1),r("ul",null,[r("li",null,"在 vue2 中 v-for 优先级高于 v-if。这意味着在模板中，‌v-for 会先于 v-if 执行。‌ 因此，‌ 如果 v-if 和 v-for 同时出现在同一个元素上，‌v-for 会先执行，‌ 然后是 v-if。‌ 这种优先级的设计是为了避免不必要的循环计算，‌ 提高性能。‌ 如果 v-if 的条件判断放在 v-for 循环之外，‌ 那么每次循环都会进行一次条件判断，‌ 这可能会影响性能。‌"),r("li",null,"在 Vue 3 中，‌v-if 的优先级比 v-for 高。‌ 这意味着在 Vue 3 中，‌ 如果 v-if 和 v-for 同时出现在同一个元素上，‌v-if 会先执行。‌ 这可能导致问题，‌ 因为 v-if 执行时可能还没有访问到 v-for 循环中的变量。‌"),r("li",null,"当 v-if 和 v-for 同时存在于同一个元素上时，‌ 元素会先被循环渲染出来，‌ 然后在每次循环内部进行条件判断，‌ 决定是否显示该元素。‌ 这种优先级的设计是为了避免不必要的循环计算，‌ 提高性能。‌ 如果希望根据条件来动态显示或隐藏循环渲染的元素，‌ 应将 v-if 放在 v-for 的内部；‌ 如果只是希望在满足某个条件时才进行循环渲染，‌ 可以将 v-if 放在 v-for 的外部。‌"),r("li",null,"此外，‌ 解决 eslint 的报错时，‌ 可以将 v-if 和 v-for 分别放在不同标签中，‌ 或者使用计算属性进行改造。‌ 例如，‌ 可以将 v-if 放在包含 v-for 的 ul 标签上，‌ 而 li 标签则用于循环渲染。‌ 另一种方法是使用计算属性来过滤列表项，‌ 根据条件动态生成要显示的列表。")],-1)]))}const p=v(o,[["render",l]]);export{m as __pageData,p as default};
